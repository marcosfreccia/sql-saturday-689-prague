/*
DEMO 005: Speeding up data load
@database: sqlsat_prague
*/


USE sqlsat_prague
GO

SET STATISTICS IO ON


-- Cleaning up buffers and all sorts of caching...
DBCC FREEPROCCACHE
DBCC DROPCLEANBUFFERS
DBCC FREESESSIONCACHE
DBCC FREESYSTEMCACHE('ALL')
CHECKPOINT




-- Deleting tables before
DROP TABLE IF EXISTS dbo.DatabaseLog_CLUSTERED_INDEX
DROP TABLE IF EXISTS dbo.DatabaseLog_HEAP
DROP TABLE IF EXISTS dbo.DatabaseLog_NONCLUSTERED_INDEX


-- Create all tables before!
CREATE TABLE [dbo].DatabaseLog_CLUSTERED_INDEX
(
[DatabaseLogID] [int] NOT NULL IDENTITY(1,1) PRIMARY KEY,
[PostTime] [datetime] NOT NULL,
[DatabaseUser] NVARCHAR(50) NOT NULL,
[Event] NVARCHAR(50) NOT NULL,
[Schema] NVARCHAR(50) NULL,
[Object] NVARCHAR(50) NULL,
[TSQL] [nvarchar] (1000) NOT NULL
) 

CREATE TABLE [dbo].DatabaseLog_HEAP
(
[DatabaseLogID] [int] NOT NULL IDENTITY(1,1),
[PostTime] [datetime] NOT NULL,
[DatabaseUser] NVARCHAR(50) NOT NULL,
[Event] NVARCHAR(50) NOT NULL,
[Schema] NVARCHAR(50) NULL,
[Object] NVARCHAR(50) NULL,
[TSQL] [nvarchar] (1000) NOT NULL
) 



CREATE TABLE [dbo].DatabaseLog_NONCLUSTERED_INDEX
(
[DatabaseLogID] [int] NOT NULL IDENTITY(1,1) PRIMARY KEY NONCLUSTERED,
[PostTime] [datetime] NOT NULL,
[DatabaseUser] NVARCHAR(50) NOT NULL,
[Event] NVARCHAR(50) NOT NULL,
[Schema] NVARCHAR(50) NULL,
[Object] NVARCHAR(50) NULL,
[TSQL] [nvarchar] (1000) NOT NULL
) 


-- Now you go to Integration Services!

INSERT INTO dbo.DatabaseLog
(PostTime,DatabaseUser,Event,[Schema],Object,TSQL)
VALUES(GETDATE(),N'39IO9A8PT2NLFJCA9H2K4TKRRU',N'Id et si quartu vobis si quartu manifestum',N'OOXK068YKJ7ZHYL4IJUTM59Y', N'YD51WMQ3X9ZO0N8J4K8YVBM1PFMNMCLIHU00M38B10VNE4VX', N'92DHR297A0RCICUYQLM34HY5CA8XFPVWI71UB9T2BKZ6AGV1QUKKNOGR375HUBSL5UUBA0NHSJRJISVVE67K5A9UR')
	
INSERT INTO dbo.DatabaseLog (PostTime,DatabaseUser,Event,[Schema],Object,TSQL) 
VALUES('1996-10-12 10:37:25.480',  N'U78TAFTVIKKJ',N'non et quo, et trepicandor ut nomen quantare in',N'KZDTYC3GIY6YXOJRFR4ISUUHMN489WIEZJG6U5L73IYZF6LV',N'Q3UFH6NR3CG03GLOH65',    N'5HOMND9IDWL66K5FUCB2OCIWD05K0YI217W9D5L94HDUBK4GXH0U78HSYS9N7PIFDJ4ZOW1OR2X7ZOKTVPMIXNUSP3ALWY1EYXGSF5R1GB35B9SA7GRH30HPOB9KLGSS1I817REQYL2MKPHGB0DG6JBYGQ33W7F0JA4S0Q3F21JIXU5ZUS9L2CMH7ALGNAUQ5239LPFKWXD5ZT0ML493YUX6OMLQ5NSR7TCVRWE4DOO4YGHDAZUJ1QSB4WKY4PF95MY6H5UPP4P95S8747F6S8PG01QUBG0N8EZBIBW445UX1I5COCTW98HXXI5FEZD9311RTWPTAB2MESFIVE6YM3EZX2E05GQ4SLTZHEIRN0LY6UJ42NK0TFMZN1TRIPNTKXUSYG1HVFAMHGT2J9XIWPBCYTBGKR9YCSD90Q6MM24D4ZI77R88S5XVMHU44KX46CAP2K1S3AWUKX8YB48SJ056UIMIV1I1507RPS4NPF4H93AP8VT0C4K574VKXIX2SUPKQH9JZK24VNWR8XA07HP0F1KLWKQ6I2PFEPYRL91R1GAJ73C08WUA5O4PXOMEUWLSYHDIYIFYGXYYQ0DT8QYL8E9PL9UXNMX5UHLPQU1QHWU7Q5YWAT63Y0KJ7OWPOHATZS39FO2DP74BK2' )

-- But before open this query in another session.

-- Clear Wait Stats with this command and first clean up the wait stats

-- DBCC SQLPERF('sys.dm_os_wait_stats', CLEAR);

-- Isolate top waits for server instance since last restart or wait statistics clear  (Query 36) (Top Waits)
WITH [Waits] 
AS (SELECT wait_type, wait_time_ms/ 1000.0 AS [WaitS],
          (wait_time_ms - signal_wait_time_ms) / 1000.0 AS [ResourceS],
           signal_wait_time_ms / 1000.0 AS [SignalS],
           waiting_tasks_count AS [WaitCount],
           100.0 *  wait_time_ms / SUM (wait_time_ms) OVER() AS [Percentage],
           ROW_NUMBER() OVER(ORDER BY wait_time_ms DESC) AS [RowNum]
    FROM sys.dm_os_wait_stats WITH (NOLOCK)
    WHERE [wait_type] NOT IN (
        N'BROKER_EVENTHANDLER', N'BROKER_RECEIVE_WAITFOR', N'BROKER_TASK_STOP',
		N'BROKER_TO_FLUSH', N'BROKER_TRANSMITTER', N'CHECKPOINT_QUEUE',
        N'CHKPT', N'CLR_AUTO_EVENT', N'CLR_MANUAL_EVENT', N'CLR_SEMAPHORE',
        N'DBMIRROR_DBM_EVENT', N'DBMIRROR_EVENTS_QUEUE', N'DBMIRROR_WORKER_QUEUE',
		N'DBMIRRORING_CMD', N'DIRTY_PAGE_POLL', N'DISPATCHER_QUEUE_SEMAPHORE',
        N'EXECSYNC', N'FSAGENT', N'FT_IFTS_SCHEDULER_IDLE_WAIT', N'FT_IFTSHC_MUTEX',
        N'HADR_CLUSAPI_CALL', N'HADR_FILESTREAM_IOMGR_IOCOMPLETION', N'HADR_LOGCAPTURE_WAIT', 
		N'HADR_NOTIFICATION_DEQUEUE', N'HADR_TIMER_TASK', N'HADR_WORK_QUEUE',
        N'KSOURCE_WAKEUP', N'LAZYWRITER_SLEEP', N'LOGMGR_QUEUE', 
		N'MEMORY_ALLOCATION_EXT', N'ONDEMAND_TASK_QUEUE',
		N'PREEMPTIVE_OS_LIBRARYOPS', N'PREEMPTIVE_OS_COMOPS', N'PREEMPTIVE_OS_CRYPTOPS',
		N'PREEMPTIVE_OS_PIPEOPS', N'PREEMPTIVE_OS_AUTHENTICATIONOPS',
		N'PREEMPTIVE_OS_GENERICOPS', N'PREEMPTIVE_OS_VERIFYTRUST',
		N'PREEMPTIVE_OS_FILEOPS', N'PREEMPTIVE_OS_DEVICEOPS', N'PREEMPTIVE_OS_QUERYREGISTRY',
		N'PREEMPTIVE_OS_WRITEFILE',
		N'PREEMPTIVE_XE_CALLBACKEXECUTE', N'PREEMPTIVE_XE_DISPATCHER',
		N'PREEMPTIVE_XE_GETTARGETSTATE', N'PREEMPTIVE_XE_SESSIONCOMMIT',
		N'PREEMPTIVE_XE_TARGETINIT', N'PREEMPTIVE_XE_TARGETFINALIZE',
        N'PWAIT_ALL_COMPONENTS_INITIALIZED', N'PWAIT_DIRECTLOGCONSUMER_GETNEXT',
		N'QDS_PERSIST_TASK_MAIN_LOOP_SLEEP',
		N'QDS_ASYNC_QUEUE',
        N'QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP', N'REQUEST_FOR_DEADLOCK_SEARCH',
		N'RESOURCE_QUEUE', N'SERVER_IDLE_CHECK', N'SLEEP_BPOOL_FLUSH', N'SLEEP_DBSTARTUP',
		N'SLEEP_DCOMSTARTUP', N'SLEEP_MASTERDBREADY', N'SLEEP_MASTERMDREADY',
        N'SLEEP_MASTERUPGRADED', N'SLEEP_MSDBSTARTUP', N'SLEEP_SYSTEMTASK', N'SLEEP_TASK',
        N'SLEEP_TEMPDBSTARTUP', N'SNI_HTTP_ACCEPT', N'SP_SERVER_DIAGNOSTICS_SLEEP',
		N'SQLTRACE_BUFFER_FLUSH', N'SQLTRACE_INCREMENTAL_FLUSH_SLEEP', N'SQLTRACE_WAIT_ENTRIES',
		N'WAIT_FOR_RESULTS', N'WAITFOR', N'WAITFOR_TASKSHUTDOWN', N'WAIT_XTP_HOST_WAIT',
		N'WAIT_XTP_OFFLINE_CKPT_NEW_LOG', N'WAIT_XTP_CKPT_CLOSE', N'WAIT_XTP_RECOVERY',
		N'XE_BUFFERMGR_ALLPROCESSED_EVENT', N'XE_DISPATCHER_JOIN',
        N'XE_DISPATCHER_WAIT', N'XE_LIVE_TARGET_TVF', N'XE_TIMER_EVENT')
    AND waiting_tasks_count > 0)
SELECT
    MAX (W1.wait_type) AS [WaitType],
    CAST (MAX (W1.WaitS) AS DECIMAL (16,2)) AS [Wait_Sec],
    CAST (MAX (W1.ResourceS) AS DECIMAL (16,2)) AS [Resource_Sec],
    CAST (MAX (W1.SignalS) AS DECIMAL (16,2)) AS [Signal_Sec],
    MAX (W1.WaitCount) AS [Wait Count],
    CAST (MAX (W1.Percentage) AS DECIMAL (5,2)) AS [Wait Percentage],
    CAST ((MAX (W1.WaitS) / MAX (W1.WaitCount)) AS DECIMAL (16,4)) AS [AvgWait_Sec],
    CAST ((MAX (W1.ResourceS) / MAX (W1.WaitCount)) AS DECIMAL (16,4)) AS [AvgRes_Sec],
    CAST ((MAX (W1.SignalS) / MAX (W1.WaitCount)) AS DECIMAL (16,4)) AS [AvgSig_Sec]
FROM Waits AS W1
INNER JOIN Waits AS W2
ON W2.RowNum <= W1.RowNum
GROUP BY W1.RowNum
HAVING SUM (W2.Percentage) - MAX (W1.Percentage) < 99 -- percentage threshold
OPTION (RECOMPILE);
------




SELECT DatabaseUser,Event,Object FROM dbo.DatabaseLog_CLUSTERED_INDEX WHERE DatabaseLogID > 5000

/*
(145000 row(s) affected)
Table 'DatabaseLog_CLUSTERED_INDEX'. Scan count 1, logical reads 25254, physical reads 2, read-ahead reads 25244, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.

(1 row(s) affected)

*/

SELECT DatabaseUser,Event,Object FROM dbo.DatabaseLog_NONCLUSTERED_INDEX WHERE DatabaseLogID = 5000

/*

(145000 row(s) affected)
Table 'DatabaseLog_NONCLUSTERED_INDEX'. Scan count 1, logical reads 26049, physical reads 0, read-ahead reads 26294, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.

(1 row(s) affected)

*/

SELECT DatabaseUser,Event,Object FROM dbo.DatabaseLog_HEAP WHERE DatabaseLogID = 5000

SELECT TOP(1)* FROM dbo.DatabaseLog_CLUSTERED_INDEX

SET STATISTICS IO OFF
SET STATISTICS TIME OFF



